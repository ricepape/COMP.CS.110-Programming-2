INSTRUCTIONS FOR PATH GAME - PATH_GUI

The game board consists of a 4x5 grid of buttons, with the top and bottom row is colored differently in green and red. A path of empty spaces is given between the top and bottom row. The player has to move the buttons within the given path so that the all the buttons in the top row initially would be in the bottom row, and the bottom buttons must be in the top row.

The user can move the buttons by clicking on them and clicking on the destination next. 																																																																The button must be moved to an empty space, and there must be an empty path to get to the position. The program gives out errors for the player to notice.

During the game, the time and the player's number of moves is counted and shown to the player. The error moves is not counted in the total number of moves.

There are instructions in the game. The player can reset the game at any point while playing. The player can also pause and resume the game at any point. 

It takes at minimum 31 moves to complete the game. If you complete the game with the minimum moves, the background color will change and special congrats will be sent to you ^^. Otherwise, if you complete the game, a congratulation message is also given. If you have completed the game, you can choose reset to play another round or close to close the game.

The program has several member functions that initialize and control the game.
These include functions to initialize the game board, start, reset, pause/resume,giving instructions, close the game, display the necessary functions of the game, and handle button clicks.

The program includes those functions:
- For the main part button of the game and the validity: 
* @Function init_gridboard(): implementing the initial stage of the game, including a gridboard
with the buttons on top and bottom and the buttons for the empty slots
* @Function handle_button_clicks(): handling the process of the game button, including the
validity of the chosen button, the movement of the button.
* @Function control_game(): Handling the availability of the elements in the GUI during different
phases of the program. Before starting and after finishing the game, the game button elements
and the related buttons will be disabled.
* @Function check_if_the_player_wins(): check if all the buttons have been arranged correctly
to win according to the rules. Also different scenarios for winning is applied based on
the number of moves the player used.
* @Function set_geometry_game_buttons(): assign the game button to a specific coordinate
with given constants.

- For the Start button of the game and its implementation: 
 * @Function init_start(): setting up the Start button in the GUI
 * @Function handle_start_clicks(): Handling the functioning of the program when the player wants
to start playing, including enable the game buttons, start the timer and start counting the moves

- For the Reset button of the game and its implementation: 
 * @Function init_reset(): setting up the Reset button in the GUI for restarting the game
 * @Function handle_reset_clicks(): Reseting all components of the game to initial stage before starting the game.

- For the Instruction button of the game and its implementation:
 * @Function init_instruction(): setting up the Instruction button in the GUI to show the instructions how to play the game
 * @Function handle_instruction_clicks(): Displaying the instructions of the game to the player
from the text Browser section.

- For the Close button of the game and its implementation:
 * @Function init_close(): setting up the Close button in the GUI to close the game
 * @Function handle_close_clicks(): Handling the closing of the program.

- For the Text Browser section for giving the player information:
 * @Function init_textBrowser(): setting up the Text browser section in the GUI to inform the
information such as instructions, announcements, warning of the game,... to the player

- For the time management and time shown in the game while playing:
 * @Function init_lcdNumberSec(): setting up an object of the QLCDNumber class to display
the elapsed time in the GUI
 * @Function init_timeLabel(): setting up the "Time" label on the GUI.
 * @Function init_secondsLabel(): setting up the "seconds" label on the GUI to accompany with
the time display.
 * @Function on_lcdNumberSec_overflow: slot function connected to a signal emitted
by an LCD number widget when its value overflows, increments the "sec" variable by one and updates the value displayed on the LCD number widget to the new value

- For the move count in the game while playing:
 * @Function init_movesLabel(): setting up the "Moves:" label on the GUI.
 * @Function init_moves_madeLabel():setting up the label that show the moves the player has made
throughout the game.
 * The move is counted while the game button is clicked.
 

Additional features includes: 
- For pausing and resuming the game while playing:
* @Function init_pause_resume(): setting up the Pause/Resume button in the GUI
* @Function handle_pause_resume_clicks(): Handling the pausation and the resumation of
the game while playing
- The background will change the color to yellow if the player completes the game with the minimum moves. The background change back to initial if the player decides to reset and play again.

